import taichi as ti


@ti.func
def d_type_PT(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3) -> ti.int32:

    v12 = v2 - v1
    v13 = v3 - v1
    n = v12.cross(v13)
    v13n = v12.cross(n)
    v10 = v0 - v1

    A = ti.math.mat2([[v12.dot(v12), v12.dot(v13n)],
                      [v13n.dot(v12), v13n.dot(v13n)]])

    v10_proj = ti.math.vec2([v12.dot(v10), v13n.dot(v10)])
    param0 = A.inverse() @ v10_proj

    dtype = -1
    if param0[0]>0.0 and param0[0]<1.0 and param0[1]>=0: dtype = 3
    else:
        v32 = v3 - v2
        v32n = v32.cross(n)
        v20 = v0 - v2
        A = ti.math.mat2([[v32.dot(v32), v32.dot(v32n)],
                          [v32n.dot(v32), v32n.dot(v32n)]])

        v20_proj = ti.math.vec2([v32.dot(v20), v32n.dot(v20)])
        param1 = A.inverse() @ v20_proj
        if param1[0]>0.0 and param1[0]<1.0 and param1[1]>=0: dtype = 4
        else:
            v31 = v1 - v3
            v31n = v31.cross(n)
            v30 = v0 - v3
            A = ti.math.mat2([[v31.dot(v31), v31.dot(v31n)],
                              [v31n.dot(v31), v31n.dot(v31n)]])
            v30_proj = ti.math.vec2([v31.dot(v30), v31n.dot(v30)])
            param2 = A.inverse() @ v30_proj

            if param2[0]>0.0 and param2[0]<1.0 and param2[1]>=0: dtype = 5
            else:
                if   param0[0] <= 0.0 and param2[0] >= 1.0: dtype = 0
                elif param1[0] <= 0.0 and param0[0] >= 1.0: dtype = 1
                elif param2[0] <= 0.0 and param1[0] >= 1.0: dtype = 2
                else:                                       dtype = 6

    return dtype

@ti.func
def d_type_EE(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3) -> ti.int32:
    u, v, w = v1 - v0, v3 - v2, v0 - v2

    a = u.dot(u)
    b = u.dot(v)
    c = v.dot(v)
    d = u.dot(w)
    e = v.dot(w)

    D = a * c - b * b
    tD = D
    sN = 0.0
    tN = 0.0
    default_case = 8

    sN = b * e - c * d
    if sN <= 0.0:
        tN = e
        tD = c
        default_case = 2

    elif sN >= D:
        tN = e + b
        tD = c
        default_case = 5
    else:
        tN = (a * e - b * d)
        if tN > 0.0 and tN < tD and (u.cross(v).dot(w) < 1e-4 or u.cross(v).dot(u.cross(v)) < 1.0e-20 * a * c):
            if sN < D / 2:
                tN = e
                tD = c
                default_case = 2
            else:
                tN = e + b
                tD = c
                default_case = 5


    if tN <= 0.0:
        if -d <= 0.0: default_case = 0
        elif -d >= a: default_case = 3
        else: default_case = 6


    elif tN >= tD:
        if (-d + b) <= 0.0: default_case = 1
        elif (-d + b) >= a: default_case = 4
        else: default_case = 7

    return default_case

@ti.func
def d_PP(v0: ti.math.vec3, v1: ti.math.vec3) -> ti.f32:
    return (v0 - v1).dot(v0 - v1)

@ti.func
def d_PE(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3) -> ti.f32:
    a = (v1 - v0).cross(v2 - v0)
    v12 = v2 - v1
    return a.dot(a) / v12.dot(v12)

@ti.func
def d_PT(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3) -> ti.f32:

    b = (v2 - v1).cross(v3 - v1)
    aTb = (v0 - v1).dot(b)
    return aTb * aTb / b.dot(b)

@ti.func
def d_EE(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3) -> ti.f32:

    b = (v1 - v0).cross(v3 - v2)
    aTb = (v2 - v0).dot(b)

    return aTb * aTb / b.dot(b)

@ti.func
def g_PP(v0: ti.math.vec3, v1: ti.math.vec3):
    grad = 2.0 * (v0 - v1)
    return grad, -grad

@ti.func
def H_PP():

    id3 = ti.math.mat3([[1, 0, 0],
                        [0, 1, 0],
                        [0, 0, 1]])

    h22 = h11 = 2.0 * id3
    h12 = -2.0 * id3

    return h11, h22, h12


@ti.func
def g_PE(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3):
    v01, v02, v03 = v0[0], v0[1], v0[2]
    v11, v12, v13 = v1[0], v1[1], v1[2]
    v21, v22, v23 = v2[0], v2[1], v2[2]

    t17 = -v11 + v01
    t18 = -v12 + v02
    t19 = -v13 + v03
    t20 = -v21 + v01
    t21 = -v22 + v02
    t22 = -v23 + v03
    t23 = -v21 + v11
    t24 = -v22 + v12
    t25 = -v23 + v13
    t42 = 1.0 / ((t23 * t23 + t24 * t24) + t25 * t25)
    t44 = t17 * t21 + -(t18 * t20)
    t45 = t17 * t22 + -(t19 * t20)
    t46 = t18 * t22 + -(t19 * t21)
    t43 = t42 * t42
    t50 = (t44 * t44 + t45 * t45) + t46 * t46
    t51 = (v11 * 2.0 + -(v21 * 2.0)) * t43 * t50
    t52 = (v12 * 2.0 + -(v22 * 2.0)) * t43 * t50
    t43 = (v13 * 2.0 + -(v23 * 2.0)) * t43 * t50

    g0 = t42 * (t24 * t44 * 2.0 + t25 * t45 * 2.0)
    g1 = -t42 * (t23 * t44 * 2.0 - t25 * t46 * 2.0)
    g2 = -t42 * (t23 * t45 * 2.0 + t24 * t46 * 2.0)

    gvec31 = ti.math.vec3([g0, g1, g2])

    g3 = -t51 - t42 * (t21 * t44 * 2.0 + t22 * t45 * 2.0)
    g4 = -t52 + t42 * (t20 * t44 * 2.0 - t22 * t46 * 2.0)
    g5 = -t43 + t42 * (t20 * t45 * 2.0 + t21 * t46 * 2.0)
    gvec32 = ti.math.vec3([g3, g4, g5])
    g6 = t51 + t42 * (t18 * t44 * 2.0 + t19 * t45 * 2.0)
    g7 = t52 - t42 * (t17 * t44 * 2.0 - t19 * t46 * 2.0)
    g8 = t43 - t42 * (t17 * t45 * 2.0 + t18 * t46 * 2.0)
    gvec33 = ti.math.vec3([g6, g7, g8])

    return gvec31, gvec32, gvec33

@ti.func
def h_PE(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3):
    t17 = -v1.x + v0.x
    t18 = -v1.x_k + v0.x_k
    t19 = -v1.z + v0.z
    t20 = -v2.x + v0.x
    t21 = -v2.x_k + v0.x_k
    t22 = -v2.z + v0.z
    t23 = -v2.x + v1.x
    t24 = -v2.x_k + v1.x_k
    t25 = -v2.z + v1.z
    t26 = v1.x * 2.0 + -(v2.x * 2.0)
    t27 = v1.x_k * 2.0 + -(v2.x_k * 2.0)
    t28 = v1.z * 2.0 + -(v2.z * 2.0)
    t35 = t23 * t23
    t36 = t24 * t24
    t37 = t25 * t25
    t50 = t17 * t21
    t51 = t18 * t20
    t52 = t17 * t22
    t53 = t19 * t20
    t54 = t18 * t22
    t55 = t19 * t21
    t56 = t17 * t20 * 2.0
    t62 = t18 * t21 * 2.0
    t70 = t19 * t22 * 2.0
    t71 = t17 * t23 * 2.0
    t75 = t18 * t24 * 2.0
    t79 = t19 * t25 * 2.0
    t80 = t20 * t23 * 2.0
    t84 = t21 * t24 * 2.0
    t88 = t22 * t25 * 2.0
    t38 = t17 * t17 * 2.0
    t39 = t18 * t18 * 2.0
    t40 = t19 * t19 * 2.0
    t41 = t20 * t20 * 2.0
    t42 = t21 * t21 * 2.0
    t43 = t22 * t22 * 2.0
    t44 = t35 * 2.0
    t46 = t36 * 2.0
    t48 = t37 * 2.0
    t57 = t50 * 2.0
    t58 = t51 * 2.0
    t60 = t52 * 2.0
    t63 = t53 * 2.0
    t65 = t54 * 2.0
    t67 = t55 * 2.0
    t102 = 1.0 / ((t35 + t36) + t37)
    t36 = t50 + -t51
    t35 = t52 + -t53
    t37 = t54 + -t55
    t103 = t102 * t102
    t104 = pow(t102, 3.0)
    t162 = -(t23 * t24 * t102 * 2.0)
    t163 = -(t23 * t25 * t102 * 2.0)
    t164 = -(t24 * t25 * t102 * 2.0)
    t213 = t18 * t36 * 2.0 + t19 * t35 * 2.0
    t214 = t17 * t35 * 2.0 + t18 * t37 * 2.0
    t215 = t21 * t36 * 2.0 + t22 * t35 * 2.0
    t216 = t20 * t35 * 2.0 + t21 * t37 * 2.0
    t217 = t24 * t36 * 2.0 + t25 * t35 * 2.0
    t218 = t23 * t35 * 2.0 + t24 * t37 * 2.0
    t35 = (t36 * t36 + t35 * t35) + t37 * t37
    t225 = t17 * t36 * 2.0 + -(t19 * t37 * 2.0)
    t226 = t20 * t36 * 2.0 + -(t22 * t37 * 2.0)
    t227 = t23 * t36 * 2.0 + -(t25 * t37 * 2.0)
    t36 = t26 * t103
    t229 = t36 * t213
    t37 = t27 * t103
    t230 = t37 * t213
    t311 = t28 * t103
    t231 = t311 * t213
    t232 = t36 * t214
    t233 = t37 * t214
    t234 = t311 * t214
    t235 = t36 * t215
    t236 = t37 * t215
    t237 = t311 * t215
    t238 = t36 * t216
    t239 = t37 * t216
    t240 = t311 * t216
    t214 = t36 * t217
    t215 = t37 * t217
    t216 = t311 * t217
    t217 = t36 * t218
    t245 = t37 * t218
    t213 = t311 * t218
    t279 = t103 * t35 * 2.0
    t281 = t26 * t26 * t104 * t35 * 2.0
    t282 = t27 * t27 * t104 * t35 * 2.0
    t283 = t28 * t28 * t104 * t35 * 2.0
    t287 = t26 * t27 * t104 * t35 * 2.0
    t218 = t26 * t28 * t104 * t35 * 2.0
    t289 = t27 * t28 * t104 * t35 * 2.0
    t247 = t36 * t225
    t248 = t37 * t225
    t249 = t311 * t225
    t250 = t36 * t226
    t251 = t37 * t226
    t252 = t311 * t226
    t253 = t36 * t227
    t35 = t37 * t227
    t36 = t311 * t227
    t293 = t102 * (t75 + t79) + t214
    t295 = -(t102 * (t80 + t84)) + t213
    t299 = t102 * ((t63 + t22 * t23 * 2.0) + -t60) + t217
    t300 = t102 * ((t67 + t22 * t24 * 2.0) + -t65) + t245
    t303 = -(t102 * ((t57 + t17 * t24 * 2.0) + -t58)) + t215
    t304 = -(t102 * ((t60 + t17 * t25 * 2.0) + -t63)) + t216
    t294 = t102 * (t71 + t75) + -t213
    t297 = -(t102 * (t80 + t88)) + t35
    t88 = -(t102 * (t84 + t88)) + -t214
    t301 = t102 * ((t58 + t21 * t23 * 2.0) + -t57) + t253
    t302 = t102 * ((t65 + t21 * t25 * 2.0) + -t67) + t36
    t84 = t102 * ((t57 + t20 * t24 * 2.0) + -t58) + -t215
    t80 = t102 * ((t60 + t20 * t25 * 2.0) + -t63) + -t216
    t75 = -(t102 * ((t63 + t19 * t23 * 2.0) + -t60)) + -t217
    t227 = -(t102 * ((t67 + t19 * t24 * 2.0) + -t65)) + -t245
    t311 = ((-(t17 * t19 * t102 * 2.0) + t231) + -t232) + t218
    t245 = ((-(t20 * t22 * t102 * 2.0) + t237) + -t238) + t218
    t226 = ((-t102 * (t67 - t54 * 4.0) + t233) + t252) + -t289
    t28 = ((-t102 * (t63 - t52 * 4.0) + t232) + -t237) + -t218
    t27 = ((-t102 * (t58 - t50 * 4.0) + t247) + -t236) + -t287
    t225 = ((-(t102 * (t65 + -(t55 * 4.0))) + t239) + t249) + -t289
    t26 = ((-(t102 * (t60 + -(t53 * 4.0))) + t238) + -t231) + -t218
    t103 = ((-(t102 * (t57 + -(t51 * 4.0))) + t250) + -t230) + -t287
    t104 = (((-(t102 * (t56 + t62)) + t234) + t240) + t279) + -t283
    t218 = (((-(t102 * (t56 + t70)) + t248) + t251) + t279) + -t282
    t217 = (((-(t102 * (t62 + t70)) + -t229) + -t235) + t279) + -t281
    t216 = t102 * (t71 + t79) + -t35
    t215 = -(t102 * ((t58 + t18 * t23 * 2.0) + -t57)) + -t253
    t214 = -(t102 * ((t65 + t18 * t25 * 2.0) + -t67)) + -t36
    t213 = ((-(t17 * t18 * t102 * 2.0) + t230) + -t247) + t287
    t37 = ((-(t20 * t21 * t102 * 2.0) + t236) + -t250) + t287
    t36 = ((-(t18 * t19 * t102 * 2.0) + -t233) + -t249) + t289
    t35 = ((-(t21 * t22 * t102 * 2.0) + -t239) + -t252) + t289

    H0 = t102 * (t46 + t48)
    H1 = t162
    H2 = t163
    H3 = t88
    H4 = t84
    H5 = t80
    H6 = t293
    H7 = t303
    H8 = t304


    h11 = ti.math.mat3([[H0, H1, H2],
                        [H3, H4, H5],
                        [H6, H7, H8]])
    H9 = t162
    H10 = t102 * (t44 + t48)
    H11 = t164
    H12 = t301
    H13 = t297
    H14 = t302
    H15 = t215
    H16 = t216
    H17 = t214
    H18 = t163
    H19 = t164
    H20 = t102 * (t44 + t46)
    H21 = t299
    H22 = t300
    H23 = t295
    H24 = t75
    H25 = t227
    H26 = t294
    H27 = t88
    H28 = t301
    H29 = t299
    H30 = ((t235 * 2.0 + -t279) + t281) + t102 * (t42 + t43)
    H31 = t37
    H32 = t245
    H33 = t217
    H34 = t27
    H35 = t28
    H36 = t84
    H37 = t297
    H38 = t300
    H39 = t37
    H40 = ((t251 * -2.0 + -t279) + t282) + t102 * (t41 + t43)
    H41 = t35
    H42 = t103
    H43 = t218
    H44 = t226
    H45 = t80
    H46 = t302
    H47 = t295
    H48 = t245
    H49 = t35
    H50 = ((t240 * -2.0 + -t279) + t283) + t102 * (t41 + t42)
    H51 = t26
    H52 = t225
    H53 = t104
    H54 = t293
    H55 = t215
    H56 = t75
    H57 = t217
    H58 = t103
    H59 = t26
    H60 = ((t229 * 2.0 + -t279) + t281) + t102 * (t39 + t40)
    H61 = t213
    H62 = t311
    H63 = t303
    H64 = t216
    H65 = t227
    H66 = t27
    H67 = t218
    H68 = t225
    H69 = t213
    H70 = ((t248 * -2.0 + -t279) + t282) + t102 * (t38 + t40)
    H71 = t36
    H72 = t304
    H73 = t214
    H74 = t294
    H75 = t28
    H76 = t226
    H77 = t104
    H78 = t311
    H79 = t36
    H80 = ((t234 * -2.0 + -t279) + t283) + t102 * (t38 + t39)



@ti.func
def g_PT(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3):
    v01, v02, v03 = v0[0], v0[1], v0[2]
    v11, v12, v13 = v1[0], v1[1], v1[2]
    v21, v22, v23 = v2[0], v2[1], v2[2]
    v31, v32, v33 = v3[0], v3[1], v3[2]

    t11 = -v11 + v01
    t12 = -v12 + v02
    t13 = -v13 + v03
    t14 = -v21 + v11
    t15 = -v22 + v12
    t16 = -v23 + v13
    t17 = -v31 + v11
    t18 = -v32 + v12
    t19 = -v33 + v13
    t20 = -v31 + v21
    t21 = -v32 + v22
    t22 = -v33 + v23
    t32 = t14 * t18 + -(t15 * t17)
    t33 = t14 * t19 + -(t16 * t17)
    t34 = t15 * t19 + -(t16 * t18)
    t43 = 1.0 / ((t32 * t32 + t33 * t33) + t34 * t34)
    t45 = (t13 * t32 + t11 * t34) + -(t12 * t33)
    t44 = t43 * t43
    t46 = t45 * t45
    g0 = t34 * t43 * t45 * 2.0
    g1 = t33 * t43 * t45 * -2.0
    g2 = t32 * t43 * t45 * 2.0

    gvec31 = ti.math.vec3([g0, g1, g2])

    t45 *= t43
    g3 = -t44 * t46 * (t21 * t32 * 2.0 + t22 * t33 * 2.0) - t45 * ((t34 + t12 * t22) - t13 * t21) * 2.0
    t43 = t44 * t46
    g4 = t43 * (t20 * t32 * 2.0 - t22 * t34 * 2.0) + t45 * ((t33 + t11 * t22) - t13 * t20) * 2.0
    g5 = t43 * (t20 * t33 * 2.0 + t21 * t34 * 2.0) - t45 * ((t32 + t11 * t21) - t12 * t20) * 2.0
    gvec32 = ti.math.vec3([g3, g4, g5])
    g6 = t45 * (t12 * t19 - t13 * t18) * 2.0 + t43 * (t18 * t32 * 2.0 + t19 * t33 * 2.0)
    g7 = t45 * (t11 * t19 - t13 * t17) * -2.0 - t43 * (t17 * t32 * 2.0 - t19 * t34 * 2.0)
    g8 = t45 * (t11 * t18 - t12 * t17) * 2.0 - t43 * (t17 * t33 * 2.0 + t18 * t34 * 2.0)
    gvec33 = ti.math.vec3([g6, g7, g8])
    g9 = t45 * (t12 * t16 - t13 * t15) * -2.0 - t43 * (t15 * t32 * 2.0 + t16 * t33 * 2.0)
    g10 = t45 * (t11 * t16 - t13 * t14) * 2.0 + t43 * (t14 * t32 * 2.0 - t16 * t34 * 2.0)
    g11 = t45 * (t11 * t15 - t12 * t14) * -2.0 + t43 * (t14 * t33 * 2.0 + t15 * t34 * 2.0)
    gvec34 = ti.math.vec3([g9, g10, g11])

    return gvec31, gvec32, gvec33, gvec34

@ti.func
def h_PT(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3):
    t11 = -v1.x + v0.x
    t12 = -v1.x_k + v0.x_k
    t13 = -v1.z + v0.z
    t18 = -v2.x + v1.x
    t20 = -v2.x_k + v1.x_k
    t22 = -v2.z + v1.z
    t23 = -v3.x + v1.x
    t24 = -v3.x_k + v1.x_k
    t25 = -v3.z + v1.z
    t26 = -v3.x + v2.x
    t27 = -v3.x_k + v2.x_k
    t28 = -v3.z + v2.z
    t65 = t18 * t24
    t66 = t20 * t23
    t67 = t18 * t25
    t68 = t22 * t23
    t69 = t20 * t25
    t70 = t22 * t24
    t71 = t18 * t23 * 2.0
    t77 = t20 * t24 * 2.0
    t85 = t22 * t25 * 2.0
    t86 = t18 * t26 * 2.0
    t90 = t20 * t27 * 2.0
    t94 = t22 * t28 * 2.0
    t95 = t23 * t26 * 2.0
    t99 = t24 * t27 * 2.0
    t103 = t25 * t28 * 2.0
    t38 = t18 * t18 * 2.0
    t39 = t20 * t20 * 2.0
    t40 = t22 * t22 * 2.0
    t41 = t23 * t23 * 2.0
    t42 = t24 * t24 * 2.0
    t43 = t25 * t25 * 2.0
    t44 = t26 * t26 * 2.0
    t45 = t27 * t27 * 2.0
    t46 = t28 * t28 * 2.0
    t72 = t65 * 2.0
    t73 = t66 * 2.0
    t75 = t67 * 2.0
    t78 = t68 * 2.0
    t80 = t69 * 2.0
    t82 = t70 * 2.0
    t125 = t11 * t20 + -(t12 * t18)
    t126 = t11 * t22 + -(t13 * t18)
    t127 = t12 * t22 + -(t13 * t20)
    t128 = t11 * t24 + -(t12 * t23)
    t129 = t11 * t25 + -(t13 * t23)
    t130 = t12 * t25 + -(t13 * t24)
    t131 = t65 + -t66
    t133 = t67 + -t68
    t135 = t69 + -t70
    t149 = t131 * t131
    t150 = t133 * t133
    t151 = t135 * t135
    t189 = (t11 * t27 + -(t12 * t26)) + t131
    t190 = (t11 * t28 + -(t13 * t26)) + t133
    t191 = (t12 * t28 + -(t13 * t27)) + t135
    t192 = t20 * t131 * 2.0 + t22 * t133 * 2.0
    t193 = t18 * t133 * 2.0 + t20 * t135 * 2.0
    t194 = t24 * t131 * 2.0 + t25 * t133 * 2.0
    t195 = t23 * t133 * 2.0 + t24 * t135 * 2.0
    t196 = t27 * t131 * 2.0 + t28 * t133 * 2.0
    t197 = t26 * t133 * 2.0 + t27 * t135 * 2.0
    t198 = t18 * t131 * 2.0 + -(t22 * t135 * 2.0)
    t199 = t23 * t131 * 2.0 + -(t25 * t135 * 2.0)
    t200 = t26 * t131 * 2.0 + -(t28 * t135 * 2.0)
    t202 = 1.0 / ((t149 + t150) + t151)
    t205 = (t13 * t131 + t11 * t135) + -(t12 * t133)
    t203 = t202 * t202
    t204 = pow(t202, 3.0)
    t206 = t205 * t205
    t241 = t131 * t135 * t202 * 2.0
    t309 = t11 * t202 * t205 * 2.0
    t310 = t12 * t202 * t205 * 2.0
    t13 = t13 * t202 * t205 * 2.0
    t312 = (-v2.x + v0.x) * t202 * t205 * 2.0
    t313 = (-v2.x_k + v0.x_k) * t202 * t205 * 2.0
    t314 = (-v2.z + v0.z) * t202 * t205 * 2.0
    t315 = (-v3.x + v0.x) * t202 * t205 * 2.0
    t316 = t18 * t202 * t205 * 2.0
    t317 = (-v3.x_k + v0.x_k) * t202 * t205 * 2.0
    t318 = t20 * t202 * t205 * 2.0
    t319 = (-v3.z + v0.z) * t202 * t205 * 2.0
    t11 = t22 * t202 * t205 * 2.0
    t321 = t23 * t202 * t205 * 2.0
    t322 = t24 * t202 * t205 * 2.0
    t323 = t25 * t202 * t205 * 2.0
    t324 = t26 * t202 * t205 * 2.0
    t325 = t27 * t202 * t205 * 2.0
    t12 = t28 * t202 * t205 * 2.0
    t261 = -(t131 * t133 * t202 * 2.0)
    t262 = -(t133 * t135 * t202 * 2.0)
    t599 = t130 * t135 * t202 * 2.0 + t135 * t194 * t203 * t205 * 2.0
    t600 = -(t125 * t131 * t202 * 2.0) + t131 * t193 * t203 * t205 * 2.0
    t602 = t129 * t133 * t202 * 2.0 + t133 * t199 * t203 * t205 * 2.0
    t605 = -(t131 * t189 * t202 * 2.0) + t131 * t197 * t203 * t205 * 2.0
    t609 = (t127 * t133 * t202 * 2.0 + -t11) + t133 * t192 * t203 * t205 * 2.0
    t610 = (t126 * t135 * t202 * 2.0 + t11) + t135 * t198 * t203 * t205 * 2.0
    t611 = (t130 * t131 * t202 * 2.0 + -t322) + t131 * t194 * t203 * t205 * 2.0
    t613 = (t126 * t131 * t202 * 2.0 + -t316) + t131 * t198 * t203 * t205 * 2.0
    t615 = (-(t125 * t135 * t202 * 2.0) + -t318) + t135 * t193 * t203 * t205 * 2.0
    t616 = (-(t128 * t133 * t202 * 2.0) + -t321) + t133 * t195 * t203 * t205 * 2.0
    t621 = (t133 * t191 * t202 * 2.0 + -t12) + t133 * t196 * t203 * t205 * 2.0
    t622 = (t135 * t190 * t202 * 2.0 + t12) + t135 * t200 * t203 * t205 * 2.0
    t623 = (t131 * t190 * t202 * 2.0 + -t324) + t131 * t200 * t203 * t205 * 2.0
    t625 = (-(t135 * t189 * t202 * 2.0) + -t325) + t135 * t197 * t203 * t205 * 2.0
    t645 = ((((t127 * t129 * t202 * 2.0 + -t13) + (t72 + -(t66 * 4.0)) * t203 * t206) + t129 * t192 * t203 * t205 * 2.0) + t127 * t199 * t203 * t205 * 2.0) + t192 * t199 * t204 * t206 * 2.0
    t646_tmp = t203 * t206
    t646 = ((((t126 * t130 * t202 * 2.0 + t13) + t646_tmp * (
                t73 - t65 * 4.0)) + t126 * t194 * t203 * t205 * 2.0) + t130 * t198 * t203 * t205 * 2.0) + t194 * t198 * t204 * t206 * 2.0
    t601 = t128 * t131 * t202 * 2.0 + -(t131 * t195 * t203 * t205 * 2.0)
    t603 = -(t127 * t135 * t202 * 2.0) + -(t135 * t192 * t203 * t205 * 2.0)
    t604 = -(t126 * t133 * t202 * 2.0) + -(t133 * t198 * t203 * t205 * 2.0)
    t606 = -(t135 * t191 * t202 * 2.0) + -(t135 * t196 * t203 * t205 * 2.0)
    t607 = -(t133 * t190 * t202 * 2.0) + -(t133 * t200 * t203 * t205 * 2.0)
    t608 = (t125 * t133 * t202 * 2.0 + t316) + -(t133 * t193 * t203 * t205 * 2.0)
    t612 = (t128 * t135 * t202 * 2.0 + t322) + -(t135 * t195 * t203 * t205 * 2.0)
    t614 = (-(t127 * t131 * t202 * 2.0) + t318) + -(t131 * t192 * t203 * t205 * 2.0)
    t617 = (-(t130 * t133 * t202 * 2.0) + t323) + -(t133 * t194 * t203 * t205 * 2.0)
    t618 = (-(t129 * t131 * t202 * 2.0) + t321) + -(t131 * t199 * t203 * t205 * 2.0)
    t619 = (-(t129 * t135 * t202 * 2.0) + -t323) + -(t135 * t199 * t203 * t205 * 2.0)
    t620 = (t133 * t189 * t202 * 2.0 + t324) + -(t133 * t197 * t203 * t205 * 2.0)
    t624 = (-(t131 * t191 * t202 * 2.0) + t325) + -(t131 * t196 * t203 * t205 * 2.0)
    t626 = (((t125 * t127 * t202 * 2.0 + t18 * t22 * t203 * t206 * 2.0) + t125 * t192 * t203 * t205 * 2.0) + -(
                t127 * t193 * t203 * t205 * 2.0)) + -(t192 * t193 * t204 * t206 * 2.0)
    t627 = (((t128 * t130 * t202 * 2.0 + t23 * t25 * t203 * t206 * 2.0) + t128 * t194 * t203 * t205 * 2.0) + -(
                t130 * t195 * t203 * t205 * 2.0)) + -(t194 * t195 * t204 * t206 * 2.0)
    t628 = (((-(t125 * t126 * t202 * 2.0) + t20 * t22 * t203 * t206 * 2.0) + t126 * t193 * t203 * t205 * 2.0) + -(
                t125 * t198 * t203 * t205 * 2.0)) + t193 * t198 * t204 * t206 * 2.0
    t629 = (((-(t128 * t129 * t202 * 2.0) + t24 * t25 * t203 * t206 * 2.0) + t129 * t195 * t203 * t205 * 2.0) + -(
                t128 * t199 * t203 * t205 * 2.0)) + t195 * t199 * t204 * t206 * 2.0
    t630 = (((-(t126 * t127 * t202 * 2.0) + t18 * t20 * t203 * t206 * 2.0) + -(t126 * t192 * t203 * t205 * 2.0)) + -(
                t127 * t198 * t203 * t205 * 2.0)) + -(t192 * t198 * t204 * t206 * 2.0)
    t631 = (((-(t129 * t130 * t202 * 2.0) + t23 * t24 * t203 * t206 * 2.0) + -(t129 * t194 * t203 * t205 * 2.0)) + -(
                t130 * t199 * t203 * t205 * 2.0)) + -(t194 * t199 * t204 * t206 * 2.0)
    t632 = (((-(t125 * t128 * t202 * 2.0) + (
                t71 + t77) * t203 * t206) + t128 * t193 * t203 * t205 * 2.0) + t125 * t195 * t203 * t205 * 2.0) + -(
                t193 * t195 * t204 * t206 * 2.0)
    t633 = (((-(t127 * t130 * t202 * 2.0) + (t77 + t85) * t203 * t206) + -(t130 * t192 * t203 * t205 * 2.0)) + -(
                t127 * t194 * t203 * t205 * 2.0)) + -(t192 * t194 * t204 * t206 * 2.0)
    t634 = (((-(t126 * t129 * t202 * 2.0) + (t71 + t85) * t203 * t206) + -(t129 * t198 * t203 * t205 * 2.0)) + -(
                t126 * t199 * t203 * t205 * 2.0)) + -(t198 * t199 * t204 * t206 * 2.0)
    t635 = (((t127 * t191 * t202 * 2.0 + -((
                                                       t90 + t94) * t203 * t206)) + t127 * t196 * t203 * t205 * 2.0) + t191 * t192 * t203 * t205 * 2.0) + t192 * t196 * t204 * t206 * 2.0
    t636 = (((-(t128 * t189 * t202 * 2.0) + (
                t95 + t99) * t203 * t206) + t128 * t197 * t203 * t205 * 2.0) + t189 * t195 * t203 * t205 * 2.0) + -(
                t195 * t197 * t204 * t206 * 2.0)
    t637 = (((t125 * t189 * t202 * 2.0 + -((t86 + t90) * t203 * t206)) + -(t125 * t197 * t203 * t205 * 2.0)) + -(
                t189 * t193 * t203 * t205 * 2.0)) + t193 * t197 * t204 * t206 * 2.0
    t638 = (((-(t130 * t191 * t202 * 2.0) + (t99 + t103) * t203 * t206) + -(t130 * t196 * t203 * t205 * 2.0)) + -(
                t191 * t194 * t203 * t205 * 2.0)) + -(t194 * t196 * t204 * t206 * 2.0)
    t86 = (((t126 * t190 * t202 * 2.0 + -((
                                                      t86 + t94) * t203 * t206)) + t126 * t200 * t203 * t205 * 2.0) + t190 * t198 * t203 * t205 * 2.0) + t198 * t200 * t204 * t206 * 2.0
    t71 = (((-(t129 * t190 * t202 * 2.0) + (t95 + t103) * t203 * t206) + -(t129 * t200 * t203 * t205 * 2.0)) + -(
                t190 * t199 * t203 * t205 * 2.0)) + -(t199 * t200 * t204 * t206 * 2.0)
    t85 = (((t189 * t191 * t202 * 2.0 + t26 * t28 * t203 * t206 * 2.0) + t189 * t196 * t203 * t205 * 2.0) + -(
                t191 * t197 * t203 * t205 * 2.0)) + -(t196 * t197 * t204 * t206 * 2.0)
    t90 = (((-(t189 * t190 * t202 * 2.0) + t27 * t28 * t203 * t206 * 2.0) + t190 * t197 * t203 * t205 * 2.0) + -(
                t189 * t200 * t203 * t205 * 2.0)) + t197 * t200 * t204 * t206 * 2.0
    t99 = (((-(t190 * t191 * t202 * 2.0) + t26 * t27 * t203 * t206 * 2.0) + -(t190 * t196 * t203 * t205 * 2.0)) + -(
                t191 * t200 * t203 * t205 * 2.0)) + -(t196 * t200 * t204 * t206 * 2.0)
    t77 = ((((-(t127 * t128 * t202 * 2.0) + t310) + (
                t75 + -(t68 * 4.0)) * t203 * t206) + t127 * t195 * t203 * t205 * 2.0) + -(
                t128 * t192 * t203 * t205 * 2.0)) + t192 * t195 * t204 * t206 * 2.0
    t131 = ((((t126 * t128 * t202 * 2.0 + -t309) + (
                t80 + -(t70 * 4.0)) * t203 * t206) + t128 * t198 * t203 * t205 * 2.0) + -(
                t126 * t195 * t203 * t205 * 2.0)) + -(t195 * t198 * t204 * t206 * 2.0)
    t133 = ((((-(t125 * t130 * t202 * 2.0) + -t310) + t646_tmp * (t78 - t67 * 4.0))
             + t130 * t193 * t203 * t205 * 2.0)
            + -(t125 * t194 * t203 * t205 * 2.0))
    + t193 * t194 * t204 * t206 * 2.0


    t325 = ((((t125 * t129 * t202 * 2.0 + t309) + t646_tmp * (t82 - t69 * 4.0)) + t125 * t199 * t203 * t205 * 2.0) + -(t129 * t193 * t203 * t205 * 2.0))
    + -(t193 * t199 * t204 * t206 * 2.0)
    t135 = ((((t125 * t191 * t202 * 2.0 + t313) + (
                (t75 + t18 * t28 * 2.0) + -t78) * t203 * t206) + t125 * t196 * t203 * t205 * 2.0) + -(
                t191 * t193 * t203 * t205 * 2.0)) + -(t193 * t196 * t204 * t206 * 2.0)
    t324 = ((((t127 * t189 * t202 * 2.0 + -t313) + ((t78 + t22 * t26 * 2.0) + -t75) * t203 * t206) + -(
                t127 * t197 * t203 * t205 * 2.0)) + t189 * t192 * t203 * t205 * 2.0) + -(t192 * t197 * t204 * t206 * 2.0)
    t318 = ((((-(t126 * t189 * t202 * 2.0) + t312) + (
                (t82 + t22 * t27 * 2.0) + -t80) * t203 * t206) + t126 * t197 * t203 * t205 * 2.0) + -(
                t189 * t198 * t203 * t205 * 2.0)) + t197 * t198 * t204 * t206 * 2.0
    t321 = ((((-(t130 * t189 * t202 * 2.0) + t317) + -(
                ((t78 + t25 * t26 * 2.0) + -t75) * t203 * t206)) + t130 * t197 * t203 * t205 * 2.0) + -(
                t189 * t194 * t203 * t205 * 2.0)) + t194 * t197 * t204 * t206 * 2.0
    t323 = ((((t129 * t191 * t202 * 2.0 + t319) + -(((
                                                                 t72 + t23 * t27 * 2.0) + -t73) * t203 * t206)) + t129 * t196 * t203 * t205 * 2.0) + t191 * t199 * t203 * t205 * 2.0) + t196 * t199 * t204 * t206 * 2.0
    t322 = ((((-(t125 * t190 * t202 * 2.0) + -t312) + ((t80 + t20 * t28 * 2.0) + -t82) * t203 * t206) + -(
                t125 * t200 * t203 * t205 * 2.0)) + t190 * t193 * t203 * t205 * 2.0) + t193 * t200 * t204 * t206 * 2.0
    t316 = ((((t130 * t190 * t202 * 2.0 + -t319) + -(((
                                                                  t73 + t24 * t26 * 2.0) + -t72) * t203 * t206)) + t130 * t200 * t203 * t205 * 2.0) + t190 * t194 * t203 * t205 * 2.0) + t194 * t200 * t204 * t206 * 2.0
    t65 = ((((-(t128 * t191 * t202 * 2.0) + -t317) + -(((t75 + t23 * t28 * 2.0) + -t78) * t203 * t206)) + -(
                t128 * t196 * t203 * t205 * 2.0)) + t191 * t195 * t203 * t205 * 2.0) + t195 * t196 * t204 * t206 * 2.0
    t66 = ((((-(t127 * t190 * t202 * 2.0) + t314) + ((t73 + t20 * t26 * 2.0) + -t72) * t203 * t206) + -(
                t127 * t200 * t203 * t205 * 2.0)) + -(t190 * t192 * t203 * t205 * 2.0)) + -(
                t192 * t200 * t204 * t206 * 2.0)
    t13 = ((((t128 * t190 * t202 * 2.0 + t315) + -(
                ((t80 + t24 * t28 * 2.0) + -t82) * t203 * t206)) + t128 * t200 * t203 * t205 * 2.0) + -(
                t190 * t195 * t203 * t205 * 2.0)) + -(t195 * t200 * t204 * t206 * 2.0)
    t12 = ((((-(t126 * t191 * t202 * 2.0) + -t314) + ((t72 + t18 * t27 * 2.0) + -t73) * t203 * t206) + -(
                t126 * t196 * t203 * t205 * 2.0)) + -(t191 * t198 * t203 * t205 * 2.0)) + -(
                t196 * t198 * t204 * t206 * 2.0)
    t11 = ((((t129 * t189 * t202 * 2.0 + -t315) + -(((t82 + t25 * t27 * 2.0) + -t80) * t203 * t206)) + -(
                t129 * t197 * t203 * t205 * 2.0)) + t189 * t199 * t203 * t205 * 2.0) + -(t197 * t199 * t204 * t206 * 2.0)

    H0 = t151 * t202 * 2.0
    H1 = t262
    H2 = t241
    H3 = t606
    H4 = t622
    H5 = t625
    H6 = t599
    H7 = t619
    H8 = t612
    H9 = t603
    H10 = t610
    H11 = t615
    H12 = t262
    H13 = t150 * t202 * 2.0
    H14 = t261
    H15 = t621
    H16 = t607
    H17 = t620
    H18 = t617
    H19 = t602
    H20 = t616
    H21 = t609
    H22 = t604
    H23 = t608
    H24 = t241
    H25 = t261
    H26 = t149 * t202 * 2.0
    H27 = t624
    H28 = t623
    H29 = t605
    H30 = t611
    H31 = t618
    H32 = t601
    H33 = t614
    H34 = t613
    H35 = t600
    H36 = t606
    H37 = t621
    H38 = t624
    H39 = ((t191 * t191 * t202 * 2.0 + t196 * t196 * t204 * t206 * 2.0) - t646_tmp * (
                t45 + t46)) + t191 * t196 * t203 * t205 * 4.0
    H40 = t99
    H41 = t85
    H42 = t638
    H43 = t323
    H44 = t65
    H45 = t635
    H46 = t12
    H47 = t135
    H48 = t622
    H49 = t607
    H50 = t623
    H51 = t99
    H52 = ((t190 * t190 * t202 * 2.0 + t200 * t200 * t204 * t206 * 2.0) - t646_tmp * (
                t44 + t46)) + t190 * t200 * t203 * t205 * 4.0
    H53 = t90
    H54 = t316
    H55 = t71
    H56 = t13
    H57 = t66
    H58 = t86
    H59 = t322
    H60 = t625
    H61 = t620
    H62 = t605
    H63 = t85
    H64 = t90
    H65 = ((t189 * t189 * t202 * 2.0 + t197 * t197 * t204 * t206 * 2.0) - t646_tmp * (
                t44 + t45)) - t189 * t197 * t203 * t205 * 4.0
    H66 = t321
    H67 = t11
    H68 = t636
    H69 = t324
    H70 = t318
    H71 = t637
    H72 = t599
    H73 = t617
    H74 = t611
    H75 = t638
    H76 = t316
    H77 = t321
    H78 = ((t130 * t130 * t202 * 2.0 + t194 * t194 * t204 * t206 * 2.0) - t646_tmp * (
                t42 + t43)) + t130 * t194 * t203 * t205 * 4.0
    H79 = t631
    H80 = t627
    H81 = t633
    H82 = t646
    H83 = t133
    H84 = t619
    H85 = t602
    H86 = t618
    H87 = t323
    H88 = t71
    H89 = t11
    H90 = t631
    H91 = ((t129 * t129 * t202 * 2.0 + t199 * t199 * t204 * t206 * 2.0) - t646_tmp * (
                t41 + t43)) + t129 * t199 * t203 * t205 * 4.0
    H92 = t629
    H93 = t645
    H94 = t634
    H95 = t325
    H96 = t612
    H97 = t616
    H98 = t601
    H99 = t65
    H100 = t13
    H101 = t636
    H102 = t627
    H103 = t629
    H104 = ((t128 * t128 * t202 * 2.0 + t195 * t195 * t204 * t206 * 2.0) - t646_tmp * (
                t41 + t42)) - t128 * t195 * t203 * t205 * 4.0
    H105 = t77
    H106 = t131
    H107 = t632
    H108 = t603
    H109 = t609
    H110 = t614
    H111 = t635
    H112 = t66
    H113 = t324
    H114 = t633
    H115 = t645
    H116 = t77
    H117 = ((t127 * t127 * t202 * 2.0 + t192 * t192 * t204 * t206 * 2.0) - t646_tmp * (
                t39 + t40)) + t127 * t192 * t203 * t205 * 4.0
    H118 = t630
    H119 = t626
    H120 = t610
    H121 = t604
    H122 = t613
    H123 = t12
    H124 = t86
    H125 = t318
    H126 = t646
    H127 = t634
    H128 = t131
    H129 = t630
    H130 = ((t126 * t126 * t202 * 2.0 + t198 * t198 * t204 * t206 * 2.0) - t646_tmp * (
                t38 + t40)) + t126 * t198 * t203 * t205 * 4.0
    H131 = t628
    H132 = t615
    H133 = t608
    H134 = t600
    H135 = t135
    H136 = t322
    H137 = t637
    H138 = t133
    H139 = t325
    H140 = t632
    H141 = t626
    H142 = t628
    H143 = ((t125 * t125 * t202 * 2.0 + t193 * t193 * t204 * t206 * 2.0) - t646_tmp * (
                t38 + t39)) - t125 * t193 * t203 * t205 * 4.0

@ti.func
def g_EE(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3):
    v01, v02, v03 = v0[0], v0[1], v0[2]
    v11, v12, v13 = v1[0], v1[1], v1[2]
    v21, v22, v23 = v2[0], v2[1], v2[2]
    v31, v32, v33 = v3[0], v3[1], v3[2]

    t11 = -v11 + v01
    t12 = -v12 + v02
    t13 = -v13 + v03
    t14 = -v21 + v01
    t15 = -v22 + v02
    t16 = -v23 + v03
    t17 = -v31 + v21
    t18 = -v32 + v22
    t19 = -v33 + v23
    t32 = t14 * t18
    t33 = t15 * t17
    t34 = t14 * t19
    t35 = t16 * t17
    t36 = t15 * t19
    t37 = t16 * t18
    t44 = t11 * t18 + -(t12 * t17)
    t45 = t11 * t19 + -(t13 * t17)
    t46 = t12 * t19 + -(t13 * t18)
    t75 = 1.0 / ((t44 * t44 + t45 * t45) + t46 * t46)
    t77 = (t16 * t44 + t14 * t46) + -(t15 * t45)
    t76 = t75 * t75
    t78 = t77 * t77
    t79 = (t12 * t44 * 2.0 + t13 * t45 * 2.0) * t76 * t78
    t80 = (t11 * t45 * 2.0 + t12 * t46 * 2.0) * t76 * t78
    t81 = (t18 * t44 * 2.0 + t19 * t45 * 2.0) * t76 * t78
    t18 = (t17 * t45 * 2.0 + t18 * t46 * 2.0) * t76 * t78
    t83 = (t11 * t44 * 2.0 + -(t13 * t46 * 2.0)) * t76 * t78
    t19 = (t17 * t44 * 2.0 + -(t19 * t46 * 2.0)) * t76 * t78
    t76 = t75 * t77
    g0 = -t81 + t76 * ((-t36 + t37) + t46) * 2.0
    g1 = t19 - t76 * ((-t34 + t35) + t45) * 2.0
    g2 = t18 + t76 * ((-t32 + t33) + t44) * 2.0

    gvec31 = ti.math.vec3(g0, g1, g2)

    g3 = t81 + t76 * (t36 - t37) * 2.0
    g4 = -t19 - t76 * (t34 - t35) * 2.0
    g5 = -t18 + t76 * (t32 - t33) * 2.0

    gvec32 = ti.math.vec3(g3, g4, g5)

    t17 = t12 * t16 + -(t13 * t15)
    g6 = t79 - t76 * (t17 + t46) * 2.0
    t18 = t11 * t16 + -(t13 * t14)
    g7 = -t83 + t76 * (t18 + t45) * 2.0
    t19 = t11 * t15 + -(t12 * t14)
    g8 = -t80 - t76 * (t19 + t44) * 2.0

    gvec33 = ti.math.vec3(g6, g7, g8)

    g9 = -t79 + t76 * t17 * 2.0
    g10 = t83 - t76 * t18 * 2.0
    g11 = t80 + t76 * t19 * 2.0

    gvec34 = ti.math.vec3(g9, g10, g11)

    return gvec31, gvec32, gvec33, gvec34



@ti.func
def compute_q(input: ti.f32, eps_x: ti.f32)-> ti.f32:

    input_div_eps_x = input / eps_x
    return (-input_div_eps_x + 2.0) * input_div_eps_x


@ti.func
def compute_q_g(input: ti.f32, eps_x: ti.f32)-> ti.f32:

    one_div_eps_x = 1.0 / eps_x
    return 2.0 * one_div_eps_x * (-one_div_eps_x * input + 1.0)


@ti.func
def compute_q_H(input: ti.f32, eps_x: ti.f32) -> ti.f32:

    return -2.0 / (eps_x * eps_x)



@ti.func
def compute_eps_x(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3) -> ti.f32:
    return 1.0e-3 * (v0 - v1).dot(v0 - v1) * (v2 - v3).dot(v2 - v3)

@ti.func
def compute_e(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3, eps_x: ti.f32) -> ti.f32:

    cross = (v1 - v0).cross(v3 - v2)
    sq_norm = cross.dot(cross)

    e = 1.0
    if sq_norm < eps_x:
        compute_q(sq_norm, eps_x)

    return e

@ti.func
def compute_e_g(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3, eps_x: ti.f32):

    cross = (v1 - v0).cross(v3 - v2)
    sq_norm = cross.dot(cross)

    g0 = ti.math.vec3(0.0, 0.0, 0.0)
    g1 = ti.math.vec3(0.0, 0.0, 0.0)
    g2 = ti.math.vec3(0.0, 0.0, 0.0)
    g3 = ti.math.vec3(0.0, 0.0, 0.0)

    if sq_norm < eps_x:
        q_g = compute_q_g(sq_norm, eps_x)
        g0, g1, g2, g3 = computeEECrossSqNormGradient(v0, v1, v2, v3)
        g0 *= q_g
        g1 *= q_g
        g2 *= q_g
        g3 *= q_g

    return g0, g1, g2, g3

@ti.func
def computeEECrossSqNormGradient(v0: ti.math.vec3, v1: ti.math.vec3, v2: ti.math.vec3, v3: ti.math.vec3):

    t8 = -v1.x + v0.x
    t9 = -v1.x_k + v0.x_k
    t10 = -v1.z + v0.z
    t11 = -v3.x + v2.x
    t12 = -v3.x_k + v2.x_k
    t13 = -v3.z + v2.z
    t23 = t8 * t12 + -(t9 * t11)
    t24 = t8 * t13 + -(t10 * t11)
    t25 = t9 * t13 + -(t10 * t12)
    t26 = t8 * t23 * 2.0
    t27 = t9 * t23 * 2.0
    t28 = t8 * t24 * 2.0
    t29 = t10 * t24 * 2.0
    t30 = t9 * t25 * 2.0
    t31 = t10 * t25 * 2.0
    t32 = t11 * t23 * 2.0
    t33 = t12 * t23 * 2.0
    t23 = t11 * t24 * 2.0
    t10 = t13 * t24 * 2.0
    t9 = t12 * t25 * 2.0
    t8 = t13 * t25 * 2.0

    g0 = t33 + t10
    g1 = -t32 + t8
    g2 = -t23 - t9

    gvec0 = ti.math.vec3(g0, g1, g2)

    g3 = -t33 - t10
    g4 = t32 - t8
    g5 = t23 + t9
    gvec1 = ti.math.vec3(g3, g4, g5)
    g6 = -t27 - t29
    g7 = t26 - t31
    g8 = t28 + t30
    gvec2 = ti.math.vec3(g6, g7, g8)
    g9 = t27 + t29
    g10 = -t26 + t31
    g11 = -t28 - t30
    gvec3 = ti.math.vec3(g9, g10, g11)

    return gvec0, gvec1, gvec2, gvec3